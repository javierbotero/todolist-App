(()=>{"use strict";var t={774:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(15),r=n.n(o),c=n(645),i=n.n(c)()(r());i.push([t.id,".hide-form-todo {\n  display: none;\n}\n\n.show-form-todo {\n  display: block;\n}","",{version:3,sources:["webpack://src/assets/style.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB",sourcesContent:[".hide-form-todo {\n  display: none;\n}\n\n.show-form-todo {\n  display: block;\n}"],sourceRoot:""}]);const a=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var c=0;c<this.length;c++){var i=this[c][0];null!=i&&(r[i]=!0)}for(var a=0;a<t.length;a++){var s=[].concat(t[a]);o&&r[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),e.push(s))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,r=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],o=!0,r=!1,c=void 0;try{for(var i,a=t[Symbol.iterator]();!(o=(i=a.next()).done)&&(n.push(i.value),!e||n.length!==e);o=!0);}catch(t){r=!0,c=t}finally{try{o||null==a.return||a.return()}finally{if(r)throw c}}return n}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=r[1],i=r[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),d="/*# ".concat(s," */"),u=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[c].concat(u).concat([d]).join("\n")}return[c].join("\n")}},379:(t,e,n)=>{var o,r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),c=[];function i(t){for(var e=-1,n=0;n<c.length;n++)if(c[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},o=[],r=0;r<t.length;r++){var a=t[r],s=e.base?a[0]+e.base:a[0],d=n[s]||0,u="".concat(s," ").concat(d);n[s]=d+1;var l=i(u),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==l?(c[l].references++,c[l].updater(f)):c.push({identifier:u,updater:m(f,e),references:1}),o.push(u)}return o}function s(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var c=n.nc;c&&(o.nonce=c)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var i=r(t.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var d,u=(d=[],function(t,e){return d[t]=e,d.filter(Boolean).join("\n")});function l(t,e,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=u(e,r);else{var c=document.createTextNode(r),i=t.childNodes;i[e]&&t.removeChild(i[e]),i.length?t.insertBefore(c,i[e]):t.appendChild(c)}}function f(t,e,n){var o=n.css,r=n.media,c=n.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),c&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var p=null,v=0;function m(t,e){var n,o,r;if(e.singleton){var c=v++;n=p||(p=s(e)),o=l.bind(null,n,c,!1),r=l.bind(null,n,c,!0)}else n=s(e),o=f.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var r=i(n[o]);c[r].references--}for(var s=a(t,e),d=0;d<n.length;d++){var u=i(n[d]);0===c[u].references&&(c[u].updater(),c.splice(u,1))}n=s}}}}},e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={id:o,exports:{}};return t[o](r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t,e,o,r,c=[],i=function(t){return{getTodos:function(){return t.todos},addTodoToTodos:function(e){t.todos.push(e)},deleteTodoFromTodos:function(e){t.todos.splice(e,1)},changeTodo:function(e,n){t.todos[e]=n}}},a=function(t){return{setIndexProject:function(e){t.indexProject=e},getIndexProject:function(){return t.indexProject}}},s=function(t,e,n,o){var r={title:t,description:e,indexProject:n,isComplete:o};return Object.assign(r,a(r))},d={createProject:r=function(t){var e=function(t){var e={todos:arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],title:t};return Object.assign(e,i(e))}(t);o(e)},createTodo:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"My Title",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Add some description",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=s(e,n,o,r);c[o].addTodoToTodos(i),t()},addToProjectsList:o=function(e){c.push(e),t()},createFirstProject:function(){0===c.length&&r("Defaul Project")},addTodoToProject:function(e,n){n.addTodoToTodos(e),t()},editTodo:function(e,n,o,r,i,a){c[e].todos[n].title=o,c[e].todos[n].description=r,c[e].todos[n].setIndexProject(i),c[e].todos[n].isComplete=a,t()},switchTodoCompleted:function(e,n){var o=c[e].getTodos()[n];o.isComplete=!o.isComplete,t()},deleteProject:function(e){c.splice(e,1),t()},addToLocalStorage:t=function(){localStorage.setItem("projects",JSON.stringify(c))},getObjFromLocStorage:e=function(){return JSON.parse(localStorage.getItem("projects"))},setProjectsFromLocalStorage:function(){e().forEach((function(t){c.push(Object.assign(t,i(t)))})),c.forEach((function(t){return function(t){t.getTodos().forEach((function(e,n){t.changeTodo(n,Object.assign(e,a(e)))}))}(t)}))},projectsList:c},u=document.body,l=function(){return document.getElementById("form")},f=function(){return document.querySelector(".add-btn")},p=function(){return document.querySelector(".submit-todo")},v=function(){return document.querySelector("#title").value},m=function(){return document.querySelector("#description").value},h=function(){return document.querySelector("#projects-select").selectedIndex},b=function(){l().className="hide-form-todo"},y=function(){l().className="show-form-todo"},g=function(){p().addEventListener("click",(function(t){var e,n,o;t.preventDefault(),e=v(),n=m(),o=h(),d.createTodo(e,n,o)}))};const j=function(){u.innerHTML='\n    <div id="container">\n      <div class="todo-content">\n        <h3 class="title">'.concat(v().value,'</h3>\n        <h3 class="description">').concat(m().value,'</h3>\n        <h3 class="project">').concat(h().value,'</h3>\n        <button class="add-todo">Add New Todo</button>\n      </div>\n      <div class="add-todo-form">\n        <div id="edit">\n        <h3>Edit</h3>\n        <button class="add-btn">Add Todo</button>\n        </div>\n        <div id="projects">PROJECTS</div>\n      </div>\n    </div>\n    ')},T=function(){var t='\n      <div class="hide-form-todo" id="form">\n        <div class=\'ex-btn\'><span>X</span></div>\n        <form>\n          <label for="title">Title</lable><br>\n          <input type="text" id="title">\n          <label for="description">Description</lable><br>\n          <input type="text" id="description">\n          <label for="projects-select">Select the project</label>\n          <select id="projects-select">\n            '.concat(function(){var t="";return c.forEach((function(e){t+='<option value="'.concat(e.title,'">').concat(e.title,"</option>")})),t}(),'\n          </select>\n          <input class="submit-todo" type="submit" value="Submit">\n        </form>\n      </div>\n    ');u.innerHTML+=t,f().onclick=y,document.querySelector(".ex-btn").onclick=b,p().onclick=b,g()};var S=n(379),A=n.n(S),x=n(774);A()(x.Z,{insert:"head",singleton:!1}),x.Z.locals,localStorage.projects?d.setProjectsFromLocalStorage():d.addToLocalStorage(),d.createFirstProject(),j(),T()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";var e={774:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(15),r=n.n(o),i=n(645),c=n.n(i)()(r());c.push([e.id,".hide-form-todo {\n  display: none;\n}\n\n.show-form-todo {\n  display: block;\n}","",{version:3,sources:["webpack://src/assets/style.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB",sourcesContent:[".hide-form-todo {\n  display: none;\n}\n\n.show-form-todo {\n  display: block;\n}"],sourceRoot:""}]);const a=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(r[c]=!0)}for(var a=0;a<e.length;a++){var s=[].concat(e[a]);o&&r[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],o=!0,r=!1,i=void 0;try{for(var c,a=e[Symbol.iterator]();!(o=(c=a.next()).done)&&(n.push(c.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{o||null==a.return||a.return()}finally{if(r)throw i}}return n}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],c=r[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),d="/*# ".concat(s," */"),u=c.sources.map((function(e){return"/*# sourceURL=".concat(c.sourceRoot||"").concat(e," */")}));return[i].concat(u).concat([d]).join("\n")}return[i].join("\n")}},379:(e,t,n)=>{var o,r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function c(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function a(e,t){for(var n={},o=[],r=0;r<e.length;r++){var a=e[r],s=t.base?a[0]+t.base:a[0],d=n[s]||0,u="".concat(s," ").concat(d);n[s]=d+1;var l=c(u),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==l?(i[l].references++,i[l].updater(f)):i.push({identifier:u,updater:m(f,t),references:1}),o.push(u)}return o}function s(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var c=r(e.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(t)}return t}var d,u=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function l(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=u(t,r);else{var i=document.createTextNode(r),c=e.childNodes;c[t]&&e.removeChild(c[t]),c.length?e.insertBefore(i,c[t]):e.appendChild(i)}}function f(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var p=null,v=0;function m(e,t){var n,o,r;if(t.singleton){var i=v++;n=p||(p=s(t)),o=l.bind(null,n,i,!1),r=l.bind(null,n,i,!0)}else n=s(t),o=f.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=c(n[o]);i[r].references--}for(var s=a(e,t),d=0;d<n.length;d++){var u=c(n[d]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=s}}}}},t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e,t,o,r,i=[],c=function(e){return{getTodos:function(){return e.todos},addTodoToTodos:function(t){e.todos.push(t)},deleteTodoFromTodos:function(t){e.todos.splice(t,1)},changeTodo:function(t,n){e.todos[t]=n}}},a=function(e){return{setIndexProject:function(t){e.indexProject=t},getIndexProject:function(){return e.indexProject}}},s=function(e,t,n,o){var r={title:e,description:t,indexProject:n,isComplete:o};return Object.assign(r,a(r))},d={createProject:e=function(e){return function(e){var t={todos:arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],title:e};return Object.assign(t,c(t))}(e)},createTodo:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"My Title",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Add some description",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],c=s(e,n,o,r);i[o].addTodoToTodos(c),t()},addToProjectsList:r=function(e){i.push(e),t()},createFirstProject:function(){if(0===i.length){var t=e("Default Project");r(t)}},addTodoToProject:function(e,n){n.addTodoToTodos(e),t()},editTodo:function(e,n,o,r,c){i[e].todos[n].title=o,i[e].todos[n].description=r,i[e].todos[n].setIndexProject(c),t()},switchTodoCompleted:function(e,n){var o=i[e].getTodos()[n];o.isComplete=!o.isComplete,t()},deleteProject:function(e){return i.splice(e,1)},addToLocalStorage:t=function(){localStorage.setItem("projects",JSON.stringify(i)),console.log(i)},getObjFromLocStorage:o=function(){return JSON.parse(localStorage.getItem("projects"))},setProjectsFromLocalStorage:function(){o().forEach((function(e){i.push(Object.assign(e,c(e)))})),i.forEach((function(e){return function(e){e.getTodos().forEach((function(t,n){e.changeTodo(n,Object.assign(t,a(t)))}))}(e)}))},projectsList:i},u=document.body,l=function(){return document.getElementById("form")},f=function(){return document.querySelector(".add-btn")},p=function(){return document.querySelector(".submit-todo")},v=function(){l().className="hide-form-todo"},m=function(){l().className="show-form-todo"},h=function(){p().addEventListener("click",(function(e){var t,n,o;e.preventDefault(),t=document.querySelector("#title").value,n=document.querySelector("#description").value,o=document.querySelector("#projects-select").selectedIndex,d.createTodo(t,n,o)}))};const b=function(){u.innerHTML='\n    <div id="container">\n    <div id="edit">\n    <h3>Edit</h3>\n    <button class="add-btn">Add Todo</button>\n    </div>\n    <div id="projects">PROJECTS</div>\n    </div>\n    '},g=function(){var e='\n      <div class="hide-form-todo" id="form">\n        <div class=\'ex-btn\'><span>X</span></div>\n        <form>\n          <label for="title">Title</lable><br>\n          <input type="text" id="title">\n          <label for="description">Description</lable><br>\n          <input type="text" id="description">\n          <label for="projects-select">Select the project</label>\n          <select id="projects-select">\n            '.concat(function(){var e="";return i.forEach((function(t){e+='<option value="'.concat(t.title,'">').concat(t.title,"</option>")})),e}(),'\n          </select>\n          <input class="submit-todo" type="submit" value="Submit">\n        </form>\n      </div>\n    ');u.innerHTML+=e,f().onclick=m,document.querySelector(".ex-btn").onclick=v,p().onclick=v,h()};var y=n(379),j=n.n(y),T=n(774);j()(T.Z,{insert:"head",singleton:!1}),T.Z.locals,localStorage.projects?d.setProjectsFromLocalStorage():d.addToLocalStorage(),d.createFirstProject(),b(),g(),d.switchTodoCompleted(0,0),console.log(d.projectsList[0].getTodos()[0])})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
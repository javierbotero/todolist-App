(()=>{"use strict";var t={774:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(15),r=n.n(o),i=n(645),c=n.n(i)()(r());c.push([t.id,".hide-form-todo {\n  display: none;\n}\n\n.show-form-todo {\n  display: block;\n}","",{version:3,sources:["webpack://src/assets/style.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB",sourcesContent:[".hide-form-todo {\n  display: none;\n}\n\n.show-form-todo {\n  display: block;\n}"],sourceRoot:""}]);const a=c},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(r[c]=!0)}for(var a=0;a<t.length;a++){var u=[].concat(t[a]);o&&r[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,r=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],o=!0,r=!1,i=void 0;try{for(var c,a=t[Symbol.iterator]();!(o=(c=a.next()).done)&&(n.push(c.value),!e||n.length!==e);o=!0);}catch(t){r=!0,i=t}finally{try{o||null==a.return||a.return()}finally{if(r)throw i}}return n}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],c=r[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),s="/*# ".concat(u," */"),l=c.sources.map((function(t){return"/*# sourceURL=".concat(c.sourceRoot||"").concat(t," */")}));return[i].concat(l).concat([s]).join("\n")}return[i].join("\n")}},379:(t,e,n)=>{var o,r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function c(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},o=[],r=0;r<t.length;r++){var a=t[r],u=e.base?a[0]+e.base:a[0],s=n[u]||0,l="".concat(u," ").concat(s);n[u]=s+1;var d=c(l),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(f)):i.push({identifier:l,updater:v(f,e),references:1}),o.push(l)}return o}function u(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var c=r(t.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(e)}return e}var s,l=(s=[],function(t,e){return s[t]=e,s.filter(Boolean).join("\n")});function d(t,e,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=l(e,r);else{var i=document.createTextNode(r),c=t.childNodes;c[e]&&t.removeChild(c[e]),c.length?t.insertBefore(i,c[e]):t.appendChild(i)}}function f(t,e,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var p=null,m=0;function v(t,e){var n,o,r;if(e.singleton){var i=m++;n=p||(p=u(e)),o=d.bind(null,n,i,!1),r=d.bind(null,n,i,!0)}else n=u(e),o=f.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var r=c(n[o]);i[r].references--}for(var u=a(t,e),s=0;s<n.length;s++){var l=c(n[s]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=u}}}}},e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={id:o,exports:{}};return t[o](r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=[],e=function(t){var e=[],n={getTodos:function(){return e},deleteTodoFromTodos:function(t){e.splice(t,1)},addTodoToTodos:function(t){e.push(t)}};return Object.assign(n,{title:t,todos:e})},o=function(t,e,n){var o={setIndexProject:function(t){n=t},getIndexProject:function(){return n}};return Object.assign(o,{title:t,description:e,isComplete:!1})};function r(t){return function(t){if(Array.isArray(t))return c(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||i(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,e){if(t){if("string"==typeof t)return c(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(t,e):void 0}}function c(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}var a,u,s,l={createProject:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Default Project";return e(t)},createTodo:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"My Title",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Add some description",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=o(e,n,r);t[r].addTodoToTodos(i),u()},addToProjectsList:function(e){return t.push(e)},fetchProjects:function(){return t},addTodoToProject:function(t,e){e.addTodoToTodos(t)},fecthTodoList:a=function(t){return t.getTodos()},editTodo:function(t,e,n){var o,r,c=(r=3,function(t){if(Array.isArray(t))return t}(o=n)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],o=!0,r=!1,i=void 0;try{for(var c,a=t[Symbol.iterator]();!(o=(c=a.next()).done)&&(n.push(c.value),!e||n.length!==e);o=!0);}catch(t){r=!0,i=t}finally{try{o||null==a.return||a.return()}finally{if(r)throw i}}return n}}(o,r)||i(o,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=c[0],s=c[1],l=c[2],d=a(t);d[e].title=u,d[e].description=s,d[e].setIndexProject(l)},markTodoAsCompleted:function(t,e){var n=a(t);return n[e].isComplete=!n[e].isComplete,n[e].isComplete},deleteProject:function(e){return t.splice(e,1)},addToLocalStorage:u=function(){var e=t,n=s(),o=[];e.forEach((function(t,e){var i=t.title,c=t.todos;0===n.length?localStorage.setItem("".concat(i),JSON.stringify(c)):(o.push.apply(o,r(n[e].todos)),o.push.apply(o,r(c)),console.log(o),localStorage.setItem("".concat(i),JSON.stringify(o)))}))},getObjFromLocStorage:s=function(){var t=Object.keys(localStorage),e=[],n={};return t.forEach((function(t){localStorage.getItem(t)&&(n.title=t,n.todos=JSON.parse(localStorage.getItem(t)),e.push(n))})),e},setProjectsFromLocalStorage:function(){return s().forEach((function(e){t.map((function(t){return Object.assign(t,e)}))})),t}},d=document.body,f=function(){return document.getElementById("form")},p=function(){return document.querySelector(".add-btn")},m=function(){return document.querySelector(".submit-todo")},v=function(){f().className="hide-form-todo"},y=function(){f().className="show-form-todo"},h=function(){m().addEventListener("click",(function(t){var e,n,o;t.preventDefault(),e=document.querySelector("#title").value,n=document.querySelector("#description").value,o=document.querySelector("#projects-select").selectedIndex,l.createTodo(e,n,o)}))};const b=function(){d.innerHTML='\n    <div id="container">\n    <div id="edit">\n    <h3>Edit</h3>\n    <button class="add-btn">Add Todo</button>\n    </div>\n    <div id="projects">PROJECTS</div>\n    </div>\n    '},g=function(){var t='\n      <div class="hide-form-todo" id="form">\n        <div class=\'ex-btn\'><span>X</span></div>\n        <form>\n          <label for="title">Title</lable><br>\n          <input type="text" id="title">\n          <label for="description">Description</lable><br>\n          <input type="text" id="description">\n          <label for="projects-select">Select the project</label>\n          <select id="projects-select">\n            '.concat(function(){var t="";return l.fetchProjects().forEach((function(e){t+='<option value="'.concat(e.title,'">').concat(e.title,"</option>")})),t}(),'\n          </select>\n          <input class="submit-todo" type="submit" value="Submit">\n        </form>\n      </div>\n    ');d.innerHTML+=t,p().onclick=y,document.querySelector(".ex-btn").onclick=v,m().onclick=v,h()};var j=n(379),S=n.n(j),A=n(774);S()(A.Z,{insert:"head",singleton:!1}),A.Z.locals;var T=l.createProject();l.addToProjectsList(T),b(),g(),console.log(l.getObjFromLocStorage())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,